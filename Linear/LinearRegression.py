import numpy as np
from gradient_class import GradientClass
import os
import matplotlib.pyplot as plt


def input_data():

    # This function loads the data into an array and returns this array

    return np.loadtxt(os.getcwd() + r'\data.dat')


def main():

    # First the data is input into the array. Then ask to define which columns are independent/dependent
    # by specifying the number of these variable. (N.B. Sum must match no. of columns in file)
    data = input_data()
    shape_variables = (int(input("Enter no. of dependent (int):")), int(input("Enter no. of independent (int):")))

    # This is an example of how to use the class
    # The data file generated by 'example_data.py' is used. Class object is initialised with default tolerance
    # and time step

    plt.figure(figsize=(10, 3))

    lin_reg = GradientClass(data, shape_variables)
    for i in range(1, shape_variables[0] + 1):
        plt.subplot(1, shape_variables[0], i)
        lin_reg.plot_graphs(i)
        plt.gca().set_aspect(1/plt.gca().get_data_ratio())

    plt.show()
    plt.tight_layout()
    lin_reg.error()

    lin_reg.polynomial(1)


main()
